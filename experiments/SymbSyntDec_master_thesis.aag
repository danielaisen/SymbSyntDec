aag 141 6 35 1 100
2
4
6
8
10
12
14 16
18 20
22 24
26 28
30 32
34 36
38 40
42 44
46 48
50 52
54 56
58 60
62 64
66 68
70 72
74 76
78 80
82 1
16 199
24 203
40 207
44 213
48 217
64 221
72 225
76 229
80 235
20 245
28 249
32 255
36 259
52 269
56 273
60 277
68 283
84
84 82 190
86 6 5
88 7 59
90 4 7
92 90 15
94 11 28
96 95 7
98 96 15
100 10 7
102 11 67
104 6 11
106 104 79
108 95 13
110 108 43
112 7 9
114 11 13
116 112 114
118 34 117
120 119 23
122 117 6
124 8 10
126 122 124
128 126 12
130 62 117
132 74 7
134 9 11
136 132 134
138 136 13
140 34 3
142 140 5
144 143 71
146 3 5
148 2 4
150 147 149
152 38 151
154 46 147
156 145 153
158 155 20
160 156 158
162 99 101
164 103 107
166 32 111
168 121 129
170 131 139
172 52 161
174 162 164
176 166 168
178 170 172
180 174 176
182 180 178
184 87 89
186 93 56
188 184 186
190 188 183
192 7 15
194 83 0
196 82 193
198 195 197
200 82 121
202 195 201
204 82 146
206 195 205
208 13 43
210 82 209
212 195 211
214 82 38
216 195 215
218 82 117
220 195 219
222 82 145
224 195 223
226 82 62
228 195 227
230 11 79
232 82 231
234 195 233
236 153 155
238 236 20
240 83 1
242 82 238
244 241 243
246 82 94
248 241 247
250 107 32
252 82 250
254 241 253
256 82 0
258 241 257
260 129 131
262 139 52
264 260 262
266 82 264
268 241 267
270 82 186
272 241 271
274 82 184
276 241 275
278 101 103
280 82 278
282 241 281
i0 controllable_skip
i1 controllable_ship
i2 i_pay
i3 i_reqc
i4 i_open
i5 i_regaddr
l0 latch_x_var1
l1 latch_x_var1_prime
l2 latch_x_var2
l3 latch_x_var2_prime
l4 latch_x_var3
l5 latch_x_var3_prime
l6 latch_x_var4
l7 latch_x_var4_prime
l8 latch_x_var5
l9 latch_x_var5_prime
l10 latch_x_var6
l11 latch_x_var6_prime
l12 latch_x_var7
l13 latch_x_var7_prime
l14 latch_x_var8
l15 latch_x_var8_prime
l16 latch_x_var9
l17 latch_x_var9_prime
l18 latch_x_var10
l19 latch_x_var10_prime
l20 latch_x_var11
l21 latch_x_var11_prime
l22 latch_x_var12
l23 latch_x_var12_prime
l24 latch_x_var13
l25 latch_x_var13_prime
l26 latch_x_var14
l27 latch_x_var14_prime
l28 latch_x_var15
l29 latch_x_var15_prime
l30 latch_x_var16
l31 latch_x_var16_prime
l32 latch_x_var17
l33 latch_x_var17_prime
l34 latch_init
o0 F(X)
c

---state var:
x_var1: (before (since PropositionalTrue(Logic.PLTL) pay))
x_var2: (weakbefore (triggers false (and (or (not (before (and (not skip) (not ship)))) (and (or skip ship) (not (and skip ship)))) (or (not (before (before (and (not skip) (not ship))))) (and (not skip) (not ship))))))
x_var3: (before (since PropositionalTrue(Logic.PLTL) (and (weakbefore false) (or pay reqc open regaddr))))
x_var4: (weakbefore (triggers false (not open)))
x_var5: (weakbefore (triggers false (or (not pay) (since PropositionalTrue(Logic.PLTL) open))))
x_var6: (weakbefore false)
x_var7: (before (and (not skip) (not ship)))
x_var8: (before (since PropositionalTrue(Logic.PLTL) regaddr))
x_var9: (before (before (and (not skip) (not ship))))
x_var10: (weakbefore (triggers false (and (or (not (or pay reqc open regaddr)) (not (and pay reqc open regaddr))) (or (not (before (or pay reqc open regaddr))) (and (not pay) (not reqc) (not open) (not regaddr))) (or (not (before (before (or pay reqc open regaddr)))) pay reqc open regaddr))))
x_var11: (weakbefore (triggers false (or (not ship) (since PropositionalTrue(Logic.PLTL) pay))))
x_var12: (weakbefore (triggers pay (or (not pay) ship)))
x_var13: (before (or pay reqc open regaddr))
x_var14: (weakbefore (triggers open (or (not open) pay)))
x_var15: (before (since PropositionalTrue(Logic.PLTL) (and (weakbefore false) (not skip) (not ship))))
x_var16: (before (before (or pay reqc open regaddr)))
x_var17: (before (since PropositionalTrue(Logic.PLTL) open))

---
initial state:
(and (not x_var1) (not x_var3) (not x_var7) (not x_var8) (not x_var9) (not x_var13) (not x_var15) (not x_var16) (not x_var17) x_var2 x_var4 x_var5 x_var6 x_var10 x_var11 x_var12 x_var14) 
---
transition relation:
x_var1_prime iff (or pay (and PropositionalTrue(Logic.PLTL) x_var1))
x_var3_prime iff (or (and x_var6 (or pay reqc open regaddr)) (and PropositionalTrue(Logic.PLTL) x_var3))
x_var7_prime iff (and (not skip) (not ship))
x_var8_prime iff (or regaddr (and PropositionalTrue(Logic.PLTL) x_var8))
x_var9_prime iff x_var7
x_var13_prime iff (or pay reqc open regaddr)
x_var15_prime iff (or (and x_var6 (not skip) (not ship)) (and PropositionalTrue(Logic.PLTL) x_var15))
x_var16_prime iff x_var13
x_var17_prime iff (or open (and PropositionalTrue(Logic.PLTL) x_var17))
x_var2_prime iff (and (or (not x_var7) (and (or skip ship) (not (and skip ship)))) (or (not x_var9) (and (not skip) (not ship))) (or false x_var2))
x_var4_prime iff (and (not open) (or false x_var4))
x_var5_prime iff (and (or (not pay) open (and PropositionalTrue(Logic.PLTL) x_var17)) (or false x_var5))
x_var6_prime iff false
x_var10_prime iff (and (or (not (or pay reqc open regaddr)) (not (and pay reqc open regaddr))) (or (not x_var13) (and (not pay) (not reqc) (not open) (not regaddr))) (or (not x_var16) pay reqc open regaddr) (or false x_var10))
x_var11_prime iff (and (or (not ship) pay (and PropositionalTrue(Logic.PLTL) x_var1)) (or false x_var11))
x_var12_prime iff (and (or (not pay) ship) (or pay x_var12))
x_var14_prime iff (and (or (not open) pay) (or open x_var14))
---
final state: 
(and (or (not pay) ship) (or pay x_var12) (or (not ship) pay (and PropositionalTrue(Logic.PLTL) x_var1)) (or false x_var11) (or (not (and (or (and (not open) (or false x_var4)) pay (and PropositionalTrue(Logic.PLTL) x_var1)) (or (not open) pay) (or open x_var14) (or (not pay) open (and PropositionalTrue(Logic.PLTL) x_var17)) (or false x_var5) (or (and (not open) (or false x_var4)) regaddr (and PropositionalTrue(Logic.PLTL) x_var8)) (or (and x_var6 (or pay reqc open regaddr)) (and PropositionalTrue(Logic.PLTL) x_var3)) (or (not (or pay reqc open regaddr)) (not (and pay reqc open regaddr))) (or (not x_var13) (and (not pay) (not reqc) (not open) (not regaddr))) (or (not x_var16) pay reqc open regaddr) (or false x_var10))) (and (or (and x_var6 (not skip) (not ship)) (and PropositionalTrue(Logic.PLTL) x_var15)) (or (not x_var7) (and (or skip ship) (not (and skip ship)))) (or (not x_var9) (and (not skip) (not ship))) (or false x_var2))))
