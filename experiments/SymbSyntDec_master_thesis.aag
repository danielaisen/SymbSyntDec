aag 147 6 35 1 106
2
4
6
8
10
12
14 16
18 20
22 24
26 28
30 32
34 36
38 40
42 44
46 48
50 52
54 56
58 60
62 64
66 68
70 72
74 76
78 80
82 1
24 213
32 219
36 223
40 227
56 231
60 237
68 243
72 247
80 251
16 257
20 261
28 269
44 273
48 277
52 281
64 285
76 295
84
84 83 206
86 6 5
88 7 15
90 4 7
92 90 31
94 11 44
96 95 9
98 96 59
100 95 7
102 100 31
104 10 7
106 11 47
108 6 11
110 108 67
112 7 9
114 11 13
116 112 114
118 50 117
120 119 71
122 6 8
124 6 10
126 6 12
128 8 10
130 8 12
132 10 12
134 123 125
136 127 129
138 131 133
140 134 136
142 140 138
144 117 143
146 22 117
148 34 7
150 9 11
152 148 150
154 152 13
156 50 3
158 156 5
160 159 39
162 3 5
164 2 4
166 163 165
168 78 167
170 54 163
172 161 169
174 171 28
176 172 174
178 99 103
180 105 107
182 111 20
184 121 145
186 147 155
188 76 177
190 178 180
192 182 184
194 186 188
196 190 192
198 196 194
200 87 89
202 93 64
204 200 202
206 204 199
208 83 0
210 82 117
212 209 211
214 7 31
216 82 215
218 209 217
220 82 22
222 209 221
224 82 161
226 209 225
228 82 78
230 209 229
232 9 59
234 82 233
236 209 235
238 11 67
240 82 239
242 209 241
244 82 121
246 209 245
248 82 162
250 209 249
252 83 1
254 82 200
256 253 255
258 82 182
260 253 259
262 169 171
264 262 28
266 82 264
268 253 267
270 82 94
272 253 271
274 82 180
276 253 275
278 82 0
280 253 279
282 82 202
284 253 283
286 145 147
288 155 76
290 286 288
292 82 290
294 253 293
i0 controllable_skip
i1 controllable_ship
i2 i_pay
i3 i_regaddr
i4 i_open
i5 i_reqc
l0 latch_x_var1
l1 latch_x_var1_prime
l2 latch_x_var2
l3 latch_x_var2_prime
l4 latch_x_var3
l5 latch_x_var3_prime
l6 latch_x_var4
l7 latch_x_var4_prime
l8 latch_x_var5
l9 latch_x_var5_prime
l10 latch_x_var6
l11 latch_x_var6_prime
l12 latch_x_var7
l13 latch_x_var7_prime
l14 latch_x_var8
l15 latch_x_var8_prime
l16 latch_x_var9
l17 latch_x_var9_prime
l18 latch_x_var10
l19 latch_x_var10_prime
l20 latch_x_var11
l21 latch_x_var11_prime
l22 latch_x_var12
l23 latch_x_var12_prime
l24 latch_x_var13
l25 latch_x_var13_prime
l26 latch_x_var14
l27 latch_x_var14_prime
l28 latch_x_var15
l29 latch_x_var15_prime
l30 latch_x_var16
l31 latch_x_var16_prime
l32 latch_x_var17
l33 latch_x_var17_prime
l34 latch_init
o0 F(X)
c

---state var:
x_var1: (weakbefore (triggers pay (or (not pay) ship)))
x_var2: (weakbefore (triggers false (or (not pay) (since PropositionalTrue(Logic.PLTL) open))))
x_var3: (before (or pay regaddr open reqc))
x_var4: (weakbefore (triggers false (and (or (not (before (and (not skip) (not ship)))) (and (or skip ship) (not (and skip ship)))) (or (not (before (before (and (not skip) (not ship))))) (and (not skip) (not ship))))))
x_var5: (before (since PropositionalTrue(Logic.PLTL) pay))
x_var6: (before (before (or pay regaddr open reqc)))
x_var7: (before (since PropositionalTrue(Logic.PLTL) (and (weakbefore false) (not skip) (not ship))))
x_var8: (weakbefore (triggers false (not open)))
x_var9: (weakbefore (triggers open (or (not open) pay)))
x_var10: (weakbefore false)
x_var11: (before (before (and (not skip) (not ship))))
x_var12: (before (since PropositionalTrue(Logic.PLTL) regaddr))
x_var13: (weakbefore (triggers false (or (not ship) (since PropositionalTrue(Logic.PLTL) pay))))
x_var14: (before (since PropositionalTrue(Logic.PLTL) open))
x_var15: (before (since PropositionalTrue(Logic.PLTL) (and (weakbefore false) (or pay regaddr open reqc))))
x_var16: (weakbefore (triggers false (and (or (not (or pay regaddr open reqc)) (and (not (and pay regaddr)) (not (and pay open)) (not (and pay reqc)) (not (and regaddr open)) (not (and regaddr reqc)) (not (and open reqc)))) (or (not (before (or pay regaddr open reqc))) (and (not pay) (not regaddr) (not open) (not reqc))) (or (not (before (before (or pay regaddr open reqc)))) pay regaddr open reqc))))
x_var17: (before (and (not skip) (not ship)))

---
initial state:
(and (not x_var3) (not x_var5) (not x_var6) (not x_var7) (not x_var11) (not x_var12) (not x_var14) (not x_var15) (not x_var17) x_var1 x_var2 x_var4 x_var8 x_var9 x_var10 x_var13 x_var16) 
---
transition relation:
x_var3_prime iff (or pay regaddr open reqc)
x_var5_prime iff (or pay (and PropositionalTrue(Logic.PLTL) x_var5))
x_var6_prime iff x_var3
x_var7_prime iff (or (and x_var10 (not skip) (not ship)) (and PropositionalTrue(Logic.PLTL) x_var7))
x_var11_prime iff x_var17
x_var12_prime iff (or regaddr (and PropositionalTrue(Logic.PLTL) x_var12))
x_var14_prime iff (or open (and PropositionalTrue(Logic.PLTL) x_var14))
x_var15_prime iff (or (and x_var10 (or pay regaddr open reqc)) (and PropositionalTrue(Logic.PLTL) x_var15))
x_var17_prime iff (and (not skip) (not ship))
x_var1_prime iff (and (or (not pay) ship) (or pay x_var1))
x_var2_prime iff (and (or (not pay) open (and PropositionalTrue(Logic.PLTL) x_var14)) (or false x_var2))
x_var4_prime iff (and (or (not x_var17) (and (or skip ship) (not (and skip ship)))) (or (not x_var11) (and (not skip) (not ship))) (or false x_var4))
x_var8_prime iff (and (not open) (or false x_var8))
x_var9_prime iff (and (or (not open) pay) (or open x_var9))
x_var10_prime iff false
x_var13_prime iff (and (or (not ship) pay (and PropositionalTrue(Logic.PLTL) x_var5)) (or false x_var13))
x_var16_prime iff (and (or (not (or pay regaddr open reqc)) (and (not (and pay regaddr)) (not (and pay open)) (not (and pay reqc)) (not (and regaddr open)) (not (and regaddr reqc)) (not (and open reqc)))) (or (not x_var3) (and (not pay) (not regaddr) (not open) (not reqc))) (or (not x_var6) pay regaddr open reqc) (or false x_var16))
---
final state: 
(and (or (not pay) ship) (or pay x_var1) (or (not ship) pay (and PropositionalTrue(Logic.PLTL) x_var5)) (or false x_var13) (or (not (and (or (and (not open) (or false x_var8)) regaddr (and PropositionalTrue(Logic.PLTL) x_var12)) (or (and (not open) (or false x_var8)) pay (and PropositionalTrue(Logic.PLTL) x_var5)) (or (not open) pay) (or open x_var9) (or (not pay) open (and PropositionalTrue(Logic.PLTL) x_var14)) (or false x_var2) (or (and x_var10 (or pay regaddr open reqc)) (and PropositionalTrue(Logic.PLTL) x_var15)) (or (not (or pay regaddr open reqc)) (and (not (and pay regaddr)) (not (and pay open)) (not (and pay reqc)) (not (and regaddr open)) (not (and regaddr reqc)) (not (and open reqc)))) (or (not x_var3) (and (not pay) (not regaddr) (not open) (not reqc))) (or (not x_var6) pay regaddr open reqc) (or false x_var16))) (and (or (and x_var10 (not skip) (not ship)) (and PropositionalTrue(Logic.PLTL) x_var7)) (or (not x_var17) (and (or skip ship) (not (and skip ship)))) (or (not x_var11) (and (not skip) (not ship))) (or false x_var4))))
